{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _jsxFileName = \"C:\\\\Users\\\\Nguyen\\\\Desktop\\\\GitHub\\\\netflix_clone\\\\providers\\\\details.js\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { createContext, useContext, useEffect, useState } from 'react';\nimport tmdbApi from \"../api/tmdb\";\nvar DetailsContext = createContext({\n  data: null,\n  isLoading: false,\n  error: null\n});\nexport function useDetailsState() {\n  return useContext(DetailsContext);\n}\nexport function DetailsProvider(_ref) {\n  var id = _ref.id,\n      mediaType = _ref.mediaType,\n      remainingProps = _objectWithoutProperties(_ref, [\"id\", \"mediaType\"]);\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      data = _useState2[0],\n      setData = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      isLoading = _useState4[0],\n      setLoading = _useState4[1];\n\n  var _useState5 = useState(null),\n      _useState6 = _slicedToArray(_useState5, 2),\n      error = _useState6[0],\n      setError = _useState6[1];\n\n  function fetchDetails() {\n    var json;\n    return _regeneratorRuntime.async(function fetchDetails$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            setLoading(true);\n            setError(null);\n            _context.prev = 2;\n            _context.next = 5;\n            return _regeneratorRuntime.awrap(tmdbApi.get(\"/\" + mediaType + \"/\" + id, {\n              append_to_response: 'recommendations,videos'\n            }));\n\n          case 5:\n            json = _context.sent;\n            json.media_type = mediaType;\n            setData(json);\n            _context.next = 13;\n            break;\n\n          case 10:\n            _context.prev = 10;\n            _context.t0 = _context[\"catch\"](2);\n            setError(_context.t0);\n\n          case 13:\n            setLoading(false);\n\n          case 14:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[2, 10]], Promise);\n  }\n\n  useEffect(function () {\n    fetchDetails();\n  }, []);\n  return React.createElement(DetailsContext.Provider, _extends({\n    value: {\n      data: data,\n      isLoading: isLoading,\n      setLoading: setLoading,\n      error: error\n    }\n  }, remainingProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 5\n    }\n  }));\n}","map":{"version":3,"sources":["C:/Users/Nguyen/Desktop/GitHub/netflix_clone/providers/details.js"],"names":["React","createContext","useContext","useEffect","useState","tmdbApi","DetailsContext","data","isLoading","error","useDetailsState","DetailsProvider","id","mediaType","remainingProps","setData","setLoading","setError","fetchDetails","get","append_to_response","json","media_type"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,UAA/B,EAA2CC,SAA3C,EAAsDC,QAAtD,QAAsE,OAAtE;AAEA,OAAOC,OAAP;AAEA,IAAMC,cAAc,GAAGL,aAAa,CAAC;AACnCM,EAAAA,IAAI,EAAE,IAD6B;AAEnCC,EAAAA,SAAS,EAAE,KAFwB;AAGnCC,EAAAA,KAAK,EAAE;AAH4B,CAAD,CAApC;AAMA,OAAO,SAASC,eAAT,GAA2B;AAChC,SAAOR,UAAU,CAACI,cAAD,CAAjB;AACD;AAED,OAAO,SAASK,eAAT,OAA+D;AAAA,MAApCC,EAAoC,QAApCA,EAAoC;AAAA,MAAhCC,SAAgC,QAAhCA,SAAgC;AAAA,MAAlBC,cAAkB;;AACpE,kBAAwBV,QAAQ,CAAC,IAAD,CAAhC;AAAA;AAAA,MAAOG,IAAP;AAAA,MAAaQ,OAAb;;AACA,mBAAgCX,QAAQ,CAAC,KAAD,CAAxC;AAAA;AAAA,MAAOI,SAAP;AAAA,MAAkBQ,UAAlB;;AACA,mBAA0BZ,QAAQ,CAAC,IAAD,CAAlC;AAAA;AAAA,MAAOK,KAAP;AAAA,MAAcQ,QAAd;;AAEA,WAAeC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AACEF,YAAAA,UAAU,CAAC,IAAD,CAAV;AACAC,YAAAA,QAAQ,CAAC,IAAD,CAAR;AAFF;AAAA;AAAA,6CAKuBZ,OAAO,CAACc,GAAR,OAAgBN,SAAhB,SAA6BD,EAA7B,EAAmC;AACpDQ,cAAAA,kBAAkB,EAAE;AADgC,aAAnC,CALvB;;AAAA;AAKUC,YAAAA,IALV;AAQIA,YAAAA,IAAI,CAACC,UAAL,GAAkBT,SAAlB;AACAE,YAAAA,OAAO,CAACM,IAAD,CAAP;AATJ;AAAA;;AAAA;AAAA;AAAA;AAWIJ,YAAAA,QAAQ,aAAR;;AAXJ;AAcED,YAAAA,UAAU,CAAC,KAAD,CAAV;;AAdF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAiBAb,EAAAA,SAAS,CAAC,YAAM;AACde,IAAAA,YAAY;AACb,GAFQ,EAEN,EAFM,CAAT;AAIA,SACE,oBAAC,cAAD,CAAgB,QAAhB;AACE,IAAA,KAAK,EAAE;AAAEX,MAAAA,IAAI,EAAJA,IAAF;AAAQC,MAAAA,SAAS,EAATA,SAAR;AAAmBQ,MAAAA,UAAU,EAAVA,UAAnB;AAA+BP,MAAAA,KAAK,EAALA;AAA/B;AADT,KAEMK,cAFN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADF;AAMD","sourcesContent":["import React, { createContext, useContext, useEffect, useState } from 'react';\n\nimport tmdbApi from 'api/tmdb';\n\nconst DetailsContext = createContext({\n  data: null,\n  isLoading: false,\n  error: null,\n});\n\nexport function useDetailsState() {\n  return useContext(DetailsContext);\n}\n\nexport function DetailsProvider({ id, mediaType, ...remainingProps }) {\n  const [data, setData] = useState(null);\n  const [isLoading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  async function fetchDetails() {\n    setLoading(true);\n    setError(null);\n\n    try {\n      const json = await tmdbApi.get(`/${mediaType}/${id}`, {\n        append_to_response: 'recommendations,videos',\n      });\n      json.media_type = mediaType;\n      setData(json);\n    } catch (error) {\n      setError(error);\n    }\n\n    setLoading(false);\n  }\n\n  useEffect(() => {\n    fetchDetails();\n  }, []);\n\n  return (\n    <DetailsContext.Provider\n      value={{ data, isLoading, setLoading, error }}\n      {...remainingProps}\n    />\n  );\n}\n"]},"metadata":{},"sourceType":"module"}