{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _jsxFileName = \"C:\\\\Users\\\\Nguyen\\\\Desktop\\\\GitHub\\\\netflix_clone\\\\ui\\\\general\\\\Text.js\";\nimport React from 'react';\nimport NativeText from \"react-native-web/dist/exports/Text\";\nimport styleVars from \"../../utils/styles\";\nvar fontSizes = {\n  small: styleVars.smallFontSize,\n  default: styleVars.defaultFontSize,\n  large: styleVars.largeFontSize,\n  xLarge: styleVars.xLargeFontSize\n};\nvar fontColors = {\n  default: styleVars.defaultFontColor,\n  primary: styleVars.primaryColor,\n  dark: styleVars.darkFontColor,\n  hint: styleVars.hintFontColor\n};\nvar fontWeights = {\n  default: styleVars.defaultFontWeight,\n  bold: styleVars.boldFontWeight,\n  bolderFontWeight: styleVars.bolderFontWeight\n};\n\nfunction Text(_ref) {\n  var _ref$color = _ref.color,\n      color = _ref$color === void 0 ? 'default' : _ref$color,\n      _ref$size = _ref.size,\n      size = _ref$size === void 0 ? 'default' : _ref$size,\n      _ref$weight = _ref.weight,\n      weight = _ref$weight === void 0 ? 'default' : _ref$weight,\n      style = _ref.style,\n      remainingProps = _objectWithoutProperties(_ref, [\"color\", \"size\", \"weight\", \"style\"]);\n\n  var _color = color;\n\n  if (typeof _color === 'string') {\n    _color = fontColors[_color];\n  }\n\n  var _size = size;\n\n  if (typeof _size === 'string') {\n    _size = fontSizes[_size];\n  }\n\n  var _weight = weight;\n\n  if (typeof _weight === 'string') {\n    _weight = fontWeights[_weight];\n  }\n\n  return React.createElement(NativeText, _extends({\n    style: [{\n      color: _color,\n      fontSize: _size,\n      fontWeight: _weight\n    }, style]\n  }, remainingProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 5\n    }\n  }));\n}\n\nexport default Text;","map":{"version":3,"sources":["C:/Users/Nguyen/Desktop/GitHub/netflix_clone/ui/general/Text.js"],"names":["React","styleVars","fontSizes","small","smallFontSize","default","defaultFontSize","large","largeFontSize","xLarge","xLargeFontSize","fontColors","defaultFontColor","primary","primaryColor","dark","darkFontColor","hint","hintFontColor","fontWeights","defaultFontWeight","bold","boldFontWeight","bolderFontWeight","Text","color","size","weight","style","remainingProps","_color","_size","_weight","fontSize","fontWeight"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAGA,OAAOC,SAAP;AAEA,IAAMC,SAAS,GAAG;AAChBC,EAAAA,KAAK,EAAEF,SAAS,CAACG,aADD;AAEhBC,EAAAA,OAAO,EAAEJ,SAAS,CAACK,eAFH;AAGhBC,EAAAA,KAAK,EAAEN,SAAS,CAACO,aAHD;AAIhBC,EAAAA,MAAM,EAAER,SAAS,CAACS;AAJF,CAAlB;AAOA,IAAMC,UAAU,GAAG;AACjBN,EAAAA,OAAO,EAAEJ,SAAS,CAACW,gBADF;AAEjBC,EAAAA,OAAO,EAAEZ,SAAS,CAACa,YAFF;AAGjBC,EAAAA,IAAI,EAAEd,SAAS,CAACe,aAHC;AAIjBC,EAAAA,IAAI,EAAEhB,SAAS,CAACiB;AAJC,CAAnB;AAOA,IAAMC,WAAW,GAAG;AAClBd,EAAAA,OAAO,EAAEJ,SAAS,CAACmB,iBADD;AAElBC,EAAAA,IAAI,EAAEpB,SAAS,CAACqB,cAFE;AAGlBC,EAAAA,gBAAgB,EAAEtB,SAAS,CAACsB;AAHV,CAApB;;AAMA,SAASC,IAAT,OAMG;AAAA,wBALDC,KAKC;AAAA,MALDA,KAKC,2BALO,SAKP;AAAA,uBAJDC,IAIC;AAAA,MAJDA,IAIC,0BAJM,SAIN;AAAA,yBAHDC,MAGC;AAAA,MAHDA,MAGC,4BAHQ,SAGR;AAAA,MAFDC,KAEC,QAFDA,KAEC;AAAA,MADEC,cACF;;AACD,MAAIC,MAAM,GAAGL,KAAb;;AACA,MAAI,OAAOK,MAAP,KAAkB,QAAtB,EAAgC;AAC9BA,IAAAA,MAAM,GAAGnB,UAAU,CAACmB,MAAD,CAAnB;AACD;;AAED,MAAIC,KAAK,GAAGL,IAAZ;;AACA,MAAI,OAAOK,KAAP,KAAiB,QAArB,EAA+B;AAC7BA,IAAAA,KAAK,GAAG7B,SAAS,CAAC6B,KAAD,CAAjB;AACD;;AAED,MAAIC,OAAO,GAAGL,MAAd;;AACA,MAAI,OAAOK,OAAP,KAAmB,QAAvB,EAAiC;AAC/BA,IAAAA,OAAO,GAAGb,WAAW,CAACa,OAAD,CAArB;AACD;;AAED,SACE,oBAAC,UAAD;AACE,IAAA,KAAK,EAAE,CAAC;AAAEP,MAAAA,KAAK,EAAEK,MAAT;AAAiBG,MAAAA,QAAQ,EAAEF,KAA3B;AAAkCG,MAAAA,UAAU,EAAEF;AAA9C,KAAD,EAA0DJ,KAA1D;AADT,KAEMC,cAFN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADF;AAMD;;AAED,eAAeL,IAAf","sourcesContent":["import React from 'react';\nimport { Text as NativeText } from 'react-native';\n\nimport styleVars from 'utils/styles';\n\nconst fontSizes = {\n  small: styleVars.smallFontSize,\n  default: styleVars.defaultFontSize,\n  large: styleVars.largeFontSize,\n  xLarge: styleVars.xLargeFontSize,\n};\n\nconst fontColors = {\n  default: styleVars.defaultFontColor,\n  primary: styleVars.primaryColor,\n  dark: styleVars.darkFontColor,\n  hint: styleVars.hintFontColor,\n};\n\nconst fontWeights = {\n  default: styleVars.defaultFontWeight,\n  bold: styleVars.boldFontWeight,\n  bolderFontWeight: styleVars.bolderFontWeight,\n};\n\nfunction Text({\n  color = 'default',\n  size = 'default',\n  weight = 'default',\n  style,\n  ...remainingProps\n}) {\n  let _color = color;\n  if (typeof _color === 'string') {\n    _color = fontColors[_color];\n  }\n\n  let _size = size;\n  if (typeof _size === 'string') {\n    _size = fontSizes[_size];\n  }\n\n  let _weight = weight;\n  if (typeof _weight === 'string') {\n    _weight = fontWeights[_weight];\n  }\n\n  return (\n    <NativeText\n      style={[{ color: _color, fontSize: _size, fontWeight: _weight }, style]}\n      {...remainingProps}\n    />\n  );\n}\n\nexport default Text;\n"]},"metadata":{},"sourceType":"module"}