{"ast":null,"code":"var units = [{\n  unit: 'h',\n  length: 1,\n  magnitude: 60,\n  allowZero: false\n}, {\n  unit: 'm',\n  length: 2,\n  magnitude: 1,\n  allowZero: true\n}];\nexport function toCountdown(duration) {\n  var list = [];\n  var remaining = parseInt(duration, 10);\n  units.forEach(function (_ref) {\n    var magnitude = _ref.magnitude,\n        length = _ref.length,\n        allowZero = _ref.allowZero,\n        unit = _ref.unit;\n    var value = parseInt(remaining / magnitude, 10);\n    remaining %= magnitude;\n\n    if (list.length > 0 || allowZero || value > 0) {\n      list.push(String(value).padStart(length, '0') + unit);\n    }\n  });\n  return list.join(' ');\n}","map":{"version":3,"sources":["C:/Users/Nguyen/Desktop/GitHub/netflix_clone/utils/time.js"],"names":["units","unit","length","magnitude","allowZero","toCountdown","duration","list","remaining","parseInt","forEach","value","push","String","padStart","join"],"mappings":"AAAA,IAAMA,KAAK,GAAG,CACZ;AACEC,EAAAA,IAAI,EAAE,GADR;AAEEC,EAAAA,MAAM,EAAE,CAFV;AAGEC,EAAAA,SAAS,EAAE,EAHb;AAIEC,EAAAA,SAAS,EAAE;AAJb,CADY,EAOZ;AACEH,EAAAA,IAAI,EAAE,GADR;AAEEC,EAAAA,MAAM,EAAE,CAFV;AAGEC,EAAAA,SAAS,EAAE,CAHb;AAIEC,EAAAA,SAAS,EAAE;AAJb,CAPY,CAAd;AAiBA,OAAO,SAASC,WAAT,CAAqBC,QAArB,EAA+B;AACpC,MAAMC,IAAI,GAAG,EAAb;AACA,MAAIC,SAAS,GAAGC,QAAQ,CAACH,QAAD,EAAW,EAAX,CAAxB;AACAN,EAAAA,KAAK,CAACU,OAAN,CAAc,gBAA4C;AAAA,QAAzCP,SAAyC,QAAzCA,SAAyC;AAAA,QAA9BD,MAA8B,QAA9BA,MAA8B;AAAA,QAAtBE,SAAsB,QAAtBA,SAAsB;AAAA,QAAXH,IAAW,QAAXA,IAAW;AACxD,QAAMU,KAAK,GAAGF,QAAQ,CAACD,SAAS,GAAGL,SAAb,EAAwB,EAAxB,CAAtB;AACAK,IAAAA,SAAS,IAAIL,SAAb;;AACA,QAAII,IAAI,CAACL,MAAL,GAAc,CAAd,IAAmBE,SAAnB,IAAgCO,KAAK,GAAG,CAA5C,EAA+C;AAC7CJ,MAAAA,IAAI,CAACK,IAAL,CAAUC,MAAM,CAACF,KAAD,CAAN,CAAcG,QAAd,CAAuBZ,MAAvB,EAA+B,GAA/B,IAAsCD,IAAhD;AACD;AACF,GAND;AAQA,SAAOM,IAAI,CAACQ,IAAL,CAAU,GAAV,CAAP;AACD","sourcesContent":["const units = [\n  {\n    unit: 'h',\n    length: 1,\n    magnitude: 60,\n    allowZero: false,\n  },\n  {\n    unit: 'm',\n    length: 2,\n    magnitude: 1,\n    allowZero: true,\n  },\n];\n\n// Returns time passed in minutes to Xm XXs\n// Ex: Input: 110, Output: 1h 50m\nexport function toCountdown(duration) {\n  const list = [];\n  let remaining = parseInt(duration, 10);\n  units.forEach(({ magnitude, length, allowZero, unit }) => {\n    const value = parseInt(remaining / magnitude, 10);\n    remaining %= magnitude;\n    if (list.length > 0 || allowZero || value > 0) {\n      list.push(String(value).padStart(length, '0') + unit);\n    }\n  });\n\n  return list.join(' ');\n}\n"]},"metadata":{},"sourceType":"module"}