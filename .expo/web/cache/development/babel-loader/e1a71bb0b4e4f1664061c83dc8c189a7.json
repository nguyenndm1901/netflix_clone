{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\Nguyen\\\\Desktop\\\\GitHub\\\\netflix_clone\\\\providers\\\\search.js\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { createContext, useContext, useState } from 'react';\nimport { filterPreferredResults } from \"../utils/tmdb\";\nimport tmdbApi from \"../api/tmdb\";\nvar SearchContext = createContext({\n  kw: '',\n  results: [],\n  isLoading: false,\n  error: null\n});\nvar ActionsContext = createContext({\n  fetchResults: function fetchResults() {},\n  setKw: function setKw() {}\n});\nexport function useSearchState() {\n  return useContext(SearchContext);\n}\nexport function useSearchActions() {\n  return useContext(ActionsContext);\n}\nexport function SearchProvider(props) {\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      kw = _useState2[0],\n      setKw = _useState2[1];\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      searchedKw = _useState4[0],\n      setSearchedKw = _useState4[1];\n\n  var _useState5 = useState([]),\n      _useState6 = _slicedToArray(_useState5, 2),\n      results = _useState6[0],\n      setResults = _useState6[1];\n\n  var _useState7 = useState(false),\n      _useState8 = _slicedToArray(_useState7, 2),\n      isLoading = _useState8[0],\n      setLoading = _useState8[1];\n\n  var _useState9 = useState(null),\n      _useState10 = _slicedToArray(_useState9, 2),\n      error = _useState10[0],\n      setError = _useState10[1];\n\n  function fetchResults() {\n    var json;\n    return _regeneratorRuntime.async(function fetchResults$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!isLoading) {\n              _context.next = 2;\n              break;\n            }\n\n            return _context.abrupt(\"return\");\n\n          case 2:\n            if (!(kw.length === 0)) {\n              _context.next = 6;\n              break;\n            }\n\n            setSearchedKw(kw);\n            setResults([]);\n            return _context.abrupt(\"return\");\n\n          case 6:\n            setLoading(true);\n            setError(null);\n            _context.prev = 8;\n            _context.next = 11;\n            return _regeneratorRuntime.awrap(tmdbApi.get('/search/multi', {\n              query: kw\n            }));\n\n          case 11:\n            json = _context.sent;\n            setSearchedKw(kw);\n            setResults(filterPreferredResults(json.results));\n            _context.next = 19;\n            break;\n\n          case 16:\n            _context.prev = 16;\n            _context.t0 = _context[\"catch\"](8);\n            setError(_context.t0);\n\n          case 19:\n            setLoading(false);\n\n          case 20:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[8, 16]], Promise);\n  }\n\n  return React.createElement(ActionsContext.Provider, {\n    value: {\n      fetchResults: fetchResults,\n      setKw: setKw\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 5\n    }\n  }, React.createElement(SearchContext.Provider, _extends({\n    value: {\n      kw: kw,\n      searchedKw: searchedKw,\n      isLoading: isLoading,\n      results: results,\n      error: error\n    }\n  }, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }\n  })));\n}","map":{"version":3,"sources":["C:/Users/Nguyen/Desktop/GitHub/netflix_clone/providers/search.js"],"names":["React","createContext","useContext","useState","filterPreferredResults","tmdbApi","SearchContext","kw","results","isLoading","error","ActionsContext","fetchResults","setKw","useSearchState","useSearchActions","SearchProvider","props","searchedKw","setSearchedKw","setResults","setLoading","setError","length","get","query","json"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,UAA/B,EAA2CC,QAA3C,QAA2D,OAA3D;AAEA,SAASC,sBAAT;AACA,OAAOC,OAAP;AAEA,IAAMC,aAAa,GAAGL,aAAa,CAAC;AAClCM,EAAAA,EAAE,EAAE,EAD8B;AAElCC,EAAAA,OAAO,EAAE,EAFyB;AAGlCC,EAAAA,SAAS,EAAE,KAHuB;AAIlCC,EAAAA,KAAK,EAAE;AAJ2B,CAAD,CAAnC;AAOA,IAAMC,cAAc,GAAGV,aAAa,CAAC;AACnCW,EAAAA,YAAY,EAAE,wBAAM,CAAE,CADa;AAEnCC,EAAAA,KAAK,EAAE,iBAAM,CAAE;AAFoB,CAAD,CAApC;AAKA,OAAO,SAASC,cAAT,GAA0B;AAC/B,SAAOZ,UAAU,CAACI,aAAD,CAAjB;AACD;AAED,OAAO,SAASS,gBAAT,GAA4B;AACjC,SAAOb,UAAU,CAACS,cAAD,CAAjB;AACD;AAED,OAAO,SAASK,cAAT,CAAwBC,KAAxB,EAA+B;AACpC,kBAAoBd,QAAQ,CAAC,EAAD,CAA5B;AAAA;AAAA,MAAOI,EAAP;AAAA,MAAWM,KAAX;;AACA,mBAAoCV,QAAQ,CAAC,EAAD,CAA5C;AAAA;AAAA,MAAOe,UAAP;AAAA,MAAmBC,aAAnB;;AACA,mBAA8BhB,QAAQ,CAAC,EAAD,CAAtC;AAAA;AAAA,MAAOK,OAAP;AAAA,MAAgBY,UAAhB;;AACA,mBAAgCjB,QAAQ,CAAC,KAAD,CAAxC;AAAA;AAAA,MAAOM,SAAP;AAAA,MAAkBY,UAAlB;;AACA,mBAA0BlB,QAAQ,CAAC,IAAD,CAAlC;AAAA;AAAA,MAAOO,KAAP;AAAA,MAAcY,QAAd;;AAEA,WAAeV,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBACMH,SADN;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA,kBAGMF,EAAE,CAACgB,MAAH,KAAc,CAHpB;AAAA;AAAA;AAAA;;AAIIJ,YAAAA,aAAa,CAACZ,EAAD,CAAb;AACAa,YAAAA,UAAU,CAAC,EAAD,CAAV;AALJ;;AAAA;AASEC,YAAAA,UAAU,CAAC,IAAD,CAAV;AACAC,YAAAA,QAAQ,CAAC,IAAD,CAAR;AAVF;AAAA;AAAA,6CAauBjB,OAAO,CAACmB,GAAR,CAAY,eAAZ,EAA6B;AAAEC,cAAAA,KAAK,EAAElB;AAAT,aAA7B,CAbvB;;AAAA;AAaUmB,YAAAA,IAbV;AAcIP,YAAAA,aAAa,CAACZ,EAAD,CAAb;AACAa,YAAAA,UAAU,CAAChB,sBAAsB,CAACsB,IAAI,CAAClB,OAAN,CAAvB,CAAV;AAfJ;AAAA;;AAAA;AAAA;AAAA;AAiBIc,YAAAA,QAAQ,aAAR;;AAjBJ;AAoBED,YAAAA,UAAU,CAAC,KAAD,CAAV;;AApBF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAuBA,SACE,oBAAC,cAAD,CAAgB,QAAhB;AAAyB,IAAA,KAAK,EAAE;AAAET,MAAAA,YAAY,EAAZA,YAAF;AAAgBC,MAAAA,KAAK,EAALA;AAAhB,KAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,aAAD,CAAe,QAAf;AACE,IAAA,KAAK,EAAE;AAAEN,MAAAA,EAAE,EAAFA,EAAF;AAAMW,MAAAA,UAAU,EAAVA,UAAN;AAAkBT,MAAAA,SAAS,EAATA,SAAlB;AAA6BD,MAAAA,OAAO,EAAPA,OAA7B;AAAsCE,MAAAA,KAAK,EAALA;AAAtC;AADT,KAEMO,KAFN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADF,CADF;AAQD","sourcesContent":["import React, { createContext, useContext, useState } from 'react';\n\nimport { filterPreferredResults } from 'utils/tmdb';\nimport tmdbApi from 'api/tmdb';\n\nconst SearchContext = createContext({\n  kw: '',\n  results: [],\n  isLoading: false,\n  error: null,\n});\n\nconst ActionsContext = createContext({\n  fetchResults: () => {},\n  setKw: () => {},\n});\n\nexport function useSearchState() {\n  return useContext(SearchContext);\n}\n\nexport function useSearchActions() {\n  return useContext(ActionsContext);\n}\n\nexport function SearchProvider(props) {\n  const [kw, setKw] = useState('');\n  const [searchedKw, setSearchedKw] = useState('');\n  const [results, setResults] = useState([]);\n  const [isLoading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  async function fetchResults() {\n    if (isLoading) return;\n\n    if (kw.length === 0) {\n      setSearchedKw(kw);\n      setResults([]);\n      return;\n    }\n\n    setLoading(true);\n    setError(null);\n\n    try {\n      const json = await tmdbApi.get('/search/multi', { query: kw });\n      setSearchedKw(kw);\n      setResults(filterPreferredResults(json.results));\n    } catch (error) {\n      setError(error);\n    }\n\n    setLoading(false);\n  }\n\n  return (\n    <ActionsContext.Provider value={{ fetchResults, setKw }}>\n      <SearchContext.Provider\n        value={{ kw, searchedKw, isLoading, results, error }}\n        {...props}\n      />\n    </ActionsContext.Provider>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}