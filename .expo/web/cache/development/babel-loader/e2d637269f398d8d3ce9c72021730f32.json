{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\Nguyen\\\\Desktop\\\\GitHub\\\\netflix_clone\\\\screens\\\\detail\\\\VideoPlayer.js\";\nimport React, { useState } from 'react';\nimport ImageBackground from \"react-native-web/dist/exports/ImageBackground\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { Feather } from '@expo/vector-icons';\nimport YoutubePlayer from 'react-native-youtube-iframe';\nimport { generateImageUrl, ImageSizes } from \"../../utils/tmdb\";\nimport { useDetailsState } from \"../../providers/details\";\nimport logo from \"../../assets/logo.png\";\nimport styleVars from \"../../utils/styles\";\nvar styles = StyleSheet.create({\n  root: {\n    width: '100%',\n    aspectRatio: styleVars.videoAspectRatio\n  },\n  player: {\n    width: '100%',\n    height: '100%',\n    flex: 1,\n    opacity: 0\n  },\n  playing: {\n    opacity: 1\n  },\n  playButtonWrapper: {\n    position: 'absolute',\n    left: 0,\n    right: 0,\n    width: '100%',\n    height: '100%',\n    alignItems: 'center',\n    justifyContent: 'center'\n  }\n});\n\nfunction VideoPlayer() {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      play = _useState2[0],\n      setPlay = _useState2[1];\n\n  var _useDetailsState = useDetailsState(),\n      data = _useDetailsState.data;\n\n  if (data.videos && data.videos.results && data.videos.results.length > 0) {\n    var video = data.videos.results[0];\n    var imageSource = logo,\n        isPlaceholder = true;\n\n    if (data.backdrop_path) {\n      imageSource = {\n        uri: generateImageUrl(data.backdrop_path, ImageSizes.backdrop)\n      };\n      isPlaceholder = false;\n    }\n\n    return React.createElement(ImageBackground, {\n      resizeMode: isPlaceholder ? 'contain' : 'cover',\n      style: styles.root,\n      source: imageSource,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 7\n      }\n    }, React.createElement(View, {\n      style: [styles.player, play && styles.playing],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }\n    }, React.createElement(YoutubePlayer, {\n      play: play,\n      height: '100%',\n      videoId: video.key,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 11\n      }\n    })), !play && React.createElement(TouchableOpacity, {\n      onPress: function onPress() {\n        return setPlay(true);\n      },\n      style: styles.playButtonWrapper,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 11\n      }\n    }, React.createElement(Feather, {\n      style: styles.play,\n      color: styleVars.primaryColor,\n      name: \"play-circle\",\n      size: 72,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 13\n      }\n    })));\n  } else {\n    return null;\n  }\n}\n\nexport default VideoPlayer;","map":{"version":3,"sources":["C:/Users/Nguyen/Desktop/GitHub/netflix_clone/screens/detail/VideoPlayer.js"],"names":["React","useState","Feather","YoutubePlayer","generateImageUrl","ImageSizes","useDetailsState","logo","styleVars","styles","StyleSheet","create","root","width","aspectRatio","videoAspectRatio","player","height","flex","opacity","playing","playButtonWrapper","position","left","right","alignItems","justifyContent","VideoPlayer","play","setPlay","data","videos","results","length","video","imageSource","isPlaceholder","backdrop_path","uri","backdrop","key","primaryColor"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport {\n  ImageBackground,\n  StyleSheet,\n  TouchableOpacity,\n  View,\n} from 'react-native';\nimport { Feather } from '@expo/vector-icons';\nimport YoutubePlayer from 'react-native-youtube-iframe';\n\nimport { generateImageUrl, ImageSizes } from 'utils/tmdb';\nimport { useDetailsState } from 'providers/details';\nimport logo from 'assets/logo.png';\nimport styleVars from 'utils/styles';\n\nconst styles = StyleSheet.create({\n  root: {\n    width: '100%',\n    aspectRatio: styleVars.videoAspectRatio,\n  },\n  player: {\n    width: '100%',\n    height: '100%',\n    flex: 1,\n    opacity: 0,\n  },\n  playing: {\n    opacity: 1,\n  },\n  playButtonWrapper: {\n    position: 'absolute',\n    left: 0,\n    right: 0,\n    width: '100%',\n    height: '100%',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n\nfunction VideoPlayer() {\n  const [play, setPlay] = useState(false);\n  const { data } = useDetailsState();\n  if (data.videos && data.videos.results && data.videos.results.length > 0) {\n    const video = data.videos.results[0];\n\n    let imageSource = logo,\n      isPlaceholder = true;\n    if (data.backdrop_path) {\n      imageSource = {\n        uri: generateImageUrl(data.backdrop_path, ImageSizes.backdrop),\n      };\n      isPlaceholder = false;\n    }\n\n    return (\n      <ImageBackground\n        resizeMode={isPlaceholder ? 'contain' : 'cover'}\n        style={styles.root}\n        source={imageSource}\n      >\n        <View style={[styles.player, play && styles.playing]}>\n          <YoutubePlayer play={play} height={'100%'} videoId={video.key} />\n        </View>\n        {!play && (\n          <TouchableOpacity\n            onPress={() => setPlay(true)}\n            style={styles.playButtonWrapper}\n          >\n            <Feather\n              style={styles.play}\n              color={styleVars.primaryColor}\n              name=\"play-circle\"\n              size={72}\n            />\n          </TouchableOpacity>\n        )}\n      </ImageBackground>\n    );\n  } else {\n    return null;\n  }\n}\n\nexport default VideoPlayer;\n"]},"metadata":{},"sourceType":"module"}